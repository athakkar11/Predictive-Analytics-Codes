---
title: "High Computing Performance"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).


```{r}
mtcars$kmpl = mtcars$mpg*1.6/3.78
mtcars_subset
```



```{r}
library(dplyr)

mtcars|>
```


```{r}
model = lm(mpg~.mtcars)
pred = predict(model)
rmse = sqrt(mean(pred - mtcars$mpg)^2); rmse
```


```{r}
rmse(pred,true){
  sqrt(mean((pred-true)^2))
  }
```

```{r}
rmse(pred = pred, true = mtcars$mpg)
```


```{r}
sum1 = function(n) sum(as.numeric(1:n))
system.time(sum1(1e9))
```

```{r}
sum(as.numeric(1:10)) #method1

sum2 = function(n) sum(seq(1,10,1)) #method2
    
sum3 = function(n) sum = 0 
for (i in 1:10) {sum = sum +i}; sum
#method 2
```


```{r}
sum1(100)
sum2(100)
sum3(100)
```


```{r}
system.time(sum1(1e7))
system.time(sum2(1e7))
system.time(sum3(1e7))
```
```{r}
install.packages('microbenchmark')
library(microbenchmark)
```

How do we go from point A to point B by doing a speed test 
When there are delays in processing data, it is important to identify the bottlenecks in code. A tip is not running large chunks of data and selecting what to run to not hold up the analysis process. 
A computer's hardware can affect the coding process

It was interesting to see that there are 4 ways of reading data -I assusmed it was just read.csv. fread sounds interesting too. 
I it important to note which fucntions are slow to ease up the coding process

A matrix is father than a data frame. It was interesting to learn that Xgboost can help data structure

fclump code is helpful in changing factor levels e.g. A-Z could be changed to ABC and other in both the analysis and scoringData set. 
Removing files that aren't helpful is a good idea to ease the R analysis/coding process. 


```{r}
library(rpart)
library(randomForest)
model_reg = function(){lm(mpg~., mtcars)}
model_tree = function(){rpart(mpg~., mtcars)}
model_randomForest = function(){randomForest(mpg~., mtcars)}

microbenchmark(model_reg, model_tree, model_randomForest, times = 50)
```












